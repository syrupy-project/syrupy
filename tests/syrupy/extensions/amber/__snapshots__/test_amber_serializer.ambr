# name: TestClass.TestNestedClass.test_nested_class_method[x]
  'parameterized nested class method x'
---
# name: TestClass.TestNestedClass.test_nested_class_method[y]
  'parameterized nested class method y'
---
# name: TestClass.TestNestedClass.test_nested_class_method[z]
  'parameterized nested class method z'
---
# name: TestClass.test_class_method_name
  'this is in a test class'
---
# name: TestClass.test_class_method_parametrized[a]
  'a'
---
# name: TestClass.test_class_method_parametrized[b]
  'b'
---
# name: TestClass.test_class_method_parametrized[c]
  'c'
---
# name: TestSubClass.TestNestedClass.test_nested_class_method[x]
  'parameterized nested class method x'
---
# name: TestSubClass.TestNestedClass.test_nested_class_method[y]
  'parameterized nested class method y'
---
# name: TestSubClass.TestNestedClass.test_nested_class_method[z]
  'parameterized nested class method z'
---
# name: TestSubClass.test_class_method_name
  'this is in a test class'
---
# name: TestSubClass.test_class_method_parametrized[a]
  'a'
---
# name: TestSubClass.test_class_method_parametrized[b]
  'b'
---
# name: TestSubClass.test_class_method_parametrized[c]
  'c'
---
# name: test_bool[False]
  False
---
# name: test_bool[True]
  True
---
# name: test_custom_object_repr
  <class 'CustomClass'> {
    a=1,
    b='2',
    c=<class 'list'> [
      1,
      2,
      3,
      ...,
    ],
    d=<class 'dict'> {
      'a': 1,
      'b': 2,
      'c': 3,
      'd': ...,
    },
    x=<class 'CustomClass'> {
      a=1,
      b='2',
      c=<class 'list'> [
        1,
        2,
        3,
        ...,
      ],
      d=<class 'dict'> {
        'a': 1,
        'b': 2,
        'c': 3,
        'd': ...,
      },
      x=None,
    },
  }
---
# name: test_cycle[cyclic0]
  <class 'list'> [
    1,
    2,
    3,
    ...,
  ]
---
# name: test_cycle[cyclic1]
  <class 'dict'> {
    'a': 1,
    'b': 2,
    'c': 3,
    'd': ...,
  }
---
# name: test_deeply_nested_multiline_string_in_dict
  <class 'dict'> {
    'value_a': <class 'dict'> {
      'value_b': '
        line 1
        line 2
        line 3
      ',
    },
  }
---
# name: test_dict[actual0]
  <class 'dict'> {
    'a': <class 'dict'> {
      'e': False,
    },
    'b': True,
    'c': 'Some text.',
    'd': <class 'list'> [
      '1',
      2,
    ],
  }
---
# name: test_dict[actual1]
  <class 'dict'> {
    'a': <class 'dict'> {
      'e': False,
    },
    'b': True,
    'c': 'Some ttext.',
    'd': <class 'list'> [
      '1',
      2,
    ],
  }
---
# name: test_dict[actual2]
  <class 'dict'> {
    '
      multi
      line
      key
    ': 'Some morre text.',
    'a': 'Some ttext.',
    1: True,
    <class 'ExampleTuple'> (
      a=1,
      b=2,
      c=3,
      d=4,
    ): <class 'dict'> {
      'e': False,
    },
    <class 'frozenset'> {
      '1',
      '2',
    }: <class 'list'> [
      '1',
      2,
    ],
  }
---
# name: test_dict[actual3]
  <class 'dict'> {
  }
---
# name: test_dict[actual4]
  <class 'dict'> {
    'key': <class 'list'> [
      '
        line1
        line2
      ',
    ],
  }
---
# name: test_dict[actual5]
  <class 'dict'> {
    'key': <class 'list'> [
      1,
      '
        line1
        line2
      ',
      2,
      '
        line3
        line4
      ',
    ],
  }
---
# name: test_dict[actual6]
  <class 'dict'> {
    'key': <class 'list'> [
      1,
      <class 'list'> [
        '
          line1
          line2
        ',
      ],
      2,
    ],
  }
---
# name: test_doubly_parametrized[bar-foo]
  'foo'
---
# name: test_doubly_parametrized[bar-foo].1
  'bar'
---
# name: test_empty_snapshot
  None
---
# name: test_empty_snapshot.1
  ''
---
# name: test_list[actual0]
  <class 'list'> [
  ]
---
# name: test_list[actual1]
  <class 'list'> [
    'this',
    'is',
    'a',
    'list',
  ]
---
# name: test_list[actual2]
  <class 'list'> [
    'contains',
    'empty',
    <class 'list'> [
    ],
  ]
---
# name: test_list[actual3]
  <class 'list'> [
    1,
    2,
    'string',
    <class 'dict'> {
      'key': 'value',
    },
  ]
---
# name: test_multiline_string_in_dict
  <class 'dict'> {
    'value': '
      line 1
      line 2
    ',
  }
---
# name: test_multiple_snapshots
  'First.'
---
# name: test_multiple_snapshots.1
  'Second.'
---
# name: test_multiple_snapshots.2
  'Third.'
---
# name: test_newline_control_characters
  '
  line 1
  line 2
  '
---
# name: test_newline_control_characters.1
  '
  line 1
  line 2
  '
---
# name: test_newline_control_characters.2
  '
  line 1
  line 2
  
  '
---
# name: test_newline_control_characters.3
  '
  line 1
  line 2
  '
---
# name: test_newline_control_characters.4
  '
  line 1
  line 2
  
  '
---
# name: test_newline_control_characters.5
  '
  line 1
  line 2
  '
---
# name: test_numbers
  3.5
---
# name: test_numbers.1
  7
---
# name: test_numbers.2
  0.3333333333333333
---
# name: test_parameter_with_dot[value.with.dot]
  'value.with.dot'
---
# name: test_reflection
  <class 'SnapshotAssertion'> {
    name='snapshot',
    num_executions=0,
  }
---
# name: test_set[actual0]
  <class 'set'> {
    'a',
    'is',
    'set',
    'this',
  }
---
# name: test_set[actual1]
  <class 'set'> {
    'contains',
    'frozen',
    <class 'frozenset'> {
      '1',
      '2',
    },
  }
---
# name: test_set[actual2]
  <class 'set'> {
    'contains',
    'tuple',
    <class 'tuple'> (
      1,
      2,
    ),
  }
---
# name: test_set[actual3]
  <class 'set'> {
    'contains',
    'namedtuple',
    <class 'ExampleTuple'> (
      a=1,
      b=2,
      c=3,
      d=4,
    ),
  }
---
# name: test_set[actual4]
  <class 'set'> {
  }
---
# name: test_snapshot_markers
  '
  # 
    # 
  ---
  # name:
  '
---
# name: test_string[0]
  ''
---
# name: test_string[10]
  b'Byte string'
---
# name: test_string[1]
  'Raw string'
---
# name: test_string[2]
  'Escaped \\n'
---
# name: test_string[3]
  'Backslash \\u U'
---
# name: test_string[4]
  'ü•ûüêçüçØ'
---
# name: test_string[5]
  'singleline:'
---
# name: test_string[6]
  '- singleline'
---
# name: test_string[7]
  '
  multi-line
  line 2
  line 3
  '
---
# name: test_string[8]
  '
  multi-line
  line 2
    line 3
  '
---
# name: test_string[9]
  "string with 'quotes'"
---
# name: test_tuple
  <class 'tuple'> (
    'this',
    'is',
    <class 'tuple'> (
      'a',
      'tuple',
    ),
  )
---
# name: test_tuple.1
  <class 'ExampleTuple'> (
    a='this',
    b='is',
    c='a',
    d=<class 'set'> {
      'named',
      'tuple',
    },
  )
---
# name: test_tuple.2
  <class 'tuple'> (
  )
---
