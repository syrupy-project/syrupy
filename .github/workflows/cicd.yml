name: Syrupy CICD

on:
  push:
    branches:
      - master
      - next
  pull_request:

env:
  CI: 1
  VENV: .venv

jobs:
  analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Setup Environment
        uses: ./.github/actions/setup-env
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Lint
        run: |
          poetry run invoke lint
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10', '3.11-dev']
      fail-fast: false
    steps:
      - uses: actions/checkout@v3.0.2
      - name: Setup Environment
        uses: ./.github/actions/setup-env
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install project dependencies
        run: . script/bootstrap
        shell: bash
      - name: Run Tests
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        shell: bash
        if: matrix.python-version != '3.11-dev'
        run: poetry run invoke test --coverage
      # pyinvoke doesn't support python 3.11 yet
      - name: Run Tests (skip invoke)
        shell: bash
        if: matrix.python-version == '3.11-dev'
        run: poetry run pytest ./tests
# # TODO: How to do this with poetry?
  # version_checks:
  #   name: Dependency Version Constraint Checks
  #   runs-on: ubuntu-latest
  #   if: "!contains(github.event.head_commit.message, '[skip ci]')"
  #   env:
  #     SKIP_DEPS: 1
  #   steps:
  #    - uses: actions/checkout@v3.0.2
  #    - name: Setup Environment
  #      uses: ./.github/actions/setup-env
  #      with:
  #         python-version: 3.7 # it's min, so we'll use an older version of python
  #     - name: Install project dependencies
  #       run: |
  #         . script/bootstrap
  #         poetry install --with=test
  #     - name: Test
  #       env:
  #         CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
  #       run: |
  #         . $VENV/bin/activate
  #         poetry run invoke test --coverage
  dry_run:
    name: Build
    runs-on: ubuntu-latest
    # Dry run check does not need to wait for others
    if: (github.event_name == 'pull_request' || github.ref == 'refs/heads/next') && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
      - name: Setup Environment
        uses: ./.github/actions/setup-env
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Dry Release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PUBLISH_TOKEN }}
        run: |
          poetry run invoke release --dry-run
      - name: Benchmark
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          poetry run invoke benchmark --report
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [analysis, tests] # [version_checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v3.0.2
        with:
          fetch-depth: 0
          persist-credentials: false
      - name: Setup Environment
        uses: ./.github/actions/setup-env
      - uses: cycjimmy/semantic-release-action@v2
        with:
          branch: master
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.TOPHAT_BOT_GH_TOKEN }}
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PUBLISH_TOKEN }}
        run: |
          poetry run invoke release --no-dry-run
      - name: Benchmark
        env:
          GH_TOKEN: ${{ secrets.TOPHAT_BOT_GH_TOKEN }}
        run: |
          poetry run invoke benchmark --report
