name: Syrupy CICD

on:
  push:
    branches:
      - master
  pull_request:

env:
  CI: 1
  VENV: .venv

jobs:
  analysis:
    name: Code Analysis
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/detect-env
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Lint
        run: |
          . $VENV/bin/activate
          invoke lint
  tests:
    name: Tests
    runs-on: ${{ matrix.os }}
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ['3.6', '3.7', '3.8', '3.9', '3.10.0-beta.4']
      fail-fast: false
    steps:
      - uses: actions/checkout@v2
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install project dependencies
        run: |
          python -m pip install -U pip --no-cache-dir
          python -m pip install -e . -r dev_requirements.txt
      - name: Test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: invoke test --coverage
  version_checks:
    name: Dependency Version Constraint Checks
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    env:
      SKIP_DEPS: 1
    steps:
      - uses: actions/checkout@v2
      - uses: ./.github/actions/detect-env
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install project dependencies
        run: |
          . script/bootstrap
          python -m pip install -e .[test] -r min_requirements.constraints
      - name: Test
        env:
          CODECOV_TOKEN: ${{ secrets.CODECOV_TOKEN }}
        run: |
          . $VENV/bin/activate
          invoke test --coverage
  dry_run:
    name: Build
    runs-on: ubuntu-latest
    # Checks to run only on PRs does not need to wait for others
    if: github.event_name == 'pull_request' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
      - uses: ./.github/actions/detect-env
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Dry Release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.TEST_PYPI_PUBLISH_TOKEN }}
        run: |
          . $VENV/bin/activate
          invoke release --dry-run
      - name: Benchmark
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          . $VENV/bin/activate
          invoke benchmark --report
  release:
    name: Release
    runs-on: ubuntu-latest
    needs: [analysis, tests, version_checks]
    if: github.event_name == 'push' && github.ref == 'refs/heads/master' && !contains(github.event.head_commit.message, '[skip ci]')
    steps:
      - uses: actions/checkout@v2
        with:
          fetch-depth: 0
          persist-credentials: false
      - uses: ./.github/actions/detect-env
      - name: Setup Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ env.PYTHON_VERSION }}
      - uses: cycjimmy/semantic-release-action@v2
        with:
          branch: master
          dry_run: false
          extra_plugins: |
            @semantic-release/changelog
            @semantic-release/git
        env:
          GITHUB_TOKEN: ${{ secrets.TOPHAT_BOT_GH_TOKEN }}
      - name: Install project dependencies
        run: . script/bootstrap
      - name: Release
        env:
          TWINE_USERNAME: __token__
          TWINE_PASSWORD: ${{ secrets.PYPI_PUBLISH_TOKEN }}
        run: |
          . $VENV/bin/activate
          invoke release --no-dry-run
      - name: Benchmark
        env:
          GH_TOKEN: ${{ secrets.TOPHAT_BOT_GH_TOKEN }}
        run: |
          . $VENV/bin/activate
          invoke benchmark --report
